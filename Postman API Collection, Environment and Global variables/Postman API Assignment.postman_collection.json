{
	"info": {
		"_postman_id": "90bde56f-40ee-40b1-9af1-42f0702f6d8c",
		"name": "Postman API Assignment",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "41108465",
		"_collection_link": "https://sqa-dsi-team.postman.co/workspace/Postman-Session-Workspace~d12ebef8-d66b-4730-8c79-2ca41228e51b/collection/41108465-90bde56f-40ee-40b1-9af1-42f0702f6d8c?action=share&source=collection_link&creator=41108465"
	},
	"item": [
		{
			"name": "Login with wrong creads",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"let tok = \"Bearer \" + jsonData.token;\r",
							"pm.globals.set(\"token\", tok);\r",
							"\r",
							"let statusCode = pm.response.code;\r",
							"console.log(statusCode)\r",
							"\r",
							"if(statusCode === 404){\r",
							"    pm.test(\"Status code is 404 when email is wrong\", function () {\r",
							"        pm.response.to.have.status(404);\r",
							"    });\r",
							"\r",
							"    pm.test(\"Message is User not found for putting wrong email\", function () {\r",
							"        pm.expect(jsonData.message).to.include(\"User not found\");\r",
							"    });\r",
							"}\r",
							"\r",
							"if(statusCode === 401){\r",
							"    pm.test(\"Status code is 401 when password is wrong\", function () {\r",
							"        pm.response.to.have.status(401);\r",
							"    });\r",
							"\r",
							"    pm.test(\"Message is Password incorrect for putting wrong password with valid email\", function () {\r",
							"        pm.expect(jsonData.message).to.include(\"Password incorrect\");\r",
							"    });\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"email\":\"admin@roadtocareer.net\",\r\n\"password\":\"123\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/user/login",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"user",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"let tok = \"Bearer \" + jsonData.token;\r",
							"pm.globals.set(\"token\", tok);\r",
							"\r",
							"pm.test(\"Status code is 200 for valid credentials\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Message is Login successful for valid credentials\", function () {\r",
							"    pm.expect(jsonData.message).to.include(\"Login successful\");\r",
							"});\r",
							"\r",
							" "
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"email\":\"admin@roadtocareer.net\",\r\n\"password\":\"1234\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/user/login",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"user",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Agent with invalid creds",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let nid = Math.floor(Math.random() * 9000000) + 1000000\r",
							"console.log(nid)\r",
							"let phoneNo=\"0183\"+ nid\r",
							"pm.collectionVariables.set(\"nid\",nid)\r",
							"pm.collectionVariables.set(\"phoneNo\",phoneNo)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json()\r",
							"// let id = jsonData.user.id\r",
							"// let agentNo = jsonData.user.phone_number\r",
							"// // console.log(id)\r",
							"// pm.globals.set(\"agentID\",id)\r",
							"// pm.globals.set(\"agentNo\", agentNo)\r",
							"\r",
							"let msg = jsonData.message\r",
							"let status = pm.response.code\r",
							"\r",
							"if(status === 400){\r",
							"    pm.test(\"Status code is 400 when there is an empty field or invalid role\", function () {\r",
							"        pm.response.to.have.status(400);\r",
							"    });\r",
							"    if(msg[0] !== \"I\"){\r",
							"        let fieldName = msg.match(/\"([^\"]+)\"/)[1]\r",
							"        console.log(fieldName)\r",
							"\r",
							"        pm.test(\"Message is \"+ fieldName + \" is not allowed to be empty when name is not provided\", function () {\r",
							"            pm.expect(jsonData.message).to.include(\"\\\"\" + fieldName + \"\\\"\" + \" is not allowed to be empty\");\r",
							"        });\r",
							"    }\r",
							"    else {\r",
							"        pm.test(\"Message is Invalid role when an invalid role is provided\", function () {\r",
							"            pm.expect(jsonData.message).to.include(\"Invalid role\");\r",
							"        });\r",
							"    }\r",
							"}\r",
							"\r",
							"if(status === 208){\r",
							"    pm.test(\"Status code is 208 when previously added phone number is provided\", function () {\r",
							"        pm.response.to.have.status(208);\r",
							"    });\r",
							"\r",
							"    pm.test(\"Message is User already exists when previously added phone number is provided\", function () {\r",
							"        pm.expect(jsonData.message).to.include(\"User already exists\");\r",
							"    });\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":\"\",\r\n    \"email\":\"{{$randomEmail}}\",\r\n    \"password\":\"{{$randomPassword}}\",\r\n    \"phone_number\":\"{{phoneNo}}\",\r\n    \"nid\":\"{{nid}}\",\r\n    \"role\": \"Agent\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/user/create",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"user",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Agent",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let nid = Math.floor(Math.random() * 9000000) + 1000000\r",
							"console.log(nid)\r",
							"let phoneNo=\"0183\"+ nid\r",
							"pm.collectionVariables.set(\"nid\",nid)\r",
							"pm.collectionVariables.set(\"phoneNo\",phoneNo)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json()\r",
							"let id = jsonData.user.id\r",
							"let agentNo = jsonData.user.phone_number\r",
							"// console.log(id)\r",
							"pm.globals.set(\"agentID\",id)\r",
							"pm.globals.set(\"agentNo\", agentNo)\r",
							"\r",
							"pm.test(\"Status code is 201 when agent is created succesfully\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Message is User created for valid credentials\", function () {\r",
							"    pm.expect(jsonData.message).to.include(\"User created\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":\"{{$randomFullName}}\",\r\n    \"email\":\"{{$randomEmail}}\",\r\n    \"password\":\"{{$randomPassword}}\",\r\n    \"phone_number\":\"{{phoneNo}}\",\r\n    \"nid\":\"{{nid}}\",\r\n    \"role\": \"Agent\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/user/create",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"user",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Merchant with invalid creds",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let nid = Math.floor(Math.random() * 9000000) + 1000000\r",
							"console.log(nid)\r",
							"let phoneNo=\"0183\"+ nid\r",
							"pm.collectionVariables.set(\"nid\",nid)\r",
							"pm.collectionVariables.set(\"phoneNo\",phoneNo)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json()\r",
							"// let id = jsonData.user.id\r",
							"// let agentNo = jsonData.user.phone_number\r",
							"// // console.log(id)\r",
							"// pm.globals.set(\"agentID\",id)\r",
							"// pm.globals.set(\"agentNo\", agentNo)\r",
							"\r",
							"let msg = jsonData.message\r",
							"let status = pm.response.code\r",
							"\r",
							"if(status === 400){\r",
							"    pm.test(\"Status code is 400 when there is an empty field or invalid role\", function () {\r",
							"        pm.response.to.have.status(400);\r",
							"    });\r",
							"    if(msg[0] !== \"I\"){\r",
							"        let fieldName = msg.match(/\"([^\"]+)\"/)[1]\r",
							"        console.log(fieldName)\r",
							"\r",
							"        pm.test(\"Message is \"+ fieldName + \" is not allowed to be empty when name is not provided\", function () {\r",
							"            pm.expect(jsonData.message).to.include(\"\\\"\" + fieldName + \"\\\"\" + \" is not allowed to be empty\");\r",
							"        });\r",
							"    }\r",
							"    else {\r",
							"        pm.test(\"Message is Invalid role when an invalid role is provided\", function () {\r",
							"            pm.expect(jsonData.message).to.include(\"Invalid role\");\r",
							"        });\r",
							"    }\r",
							"}\r",
							"\r",
							"if(status === 208){\r",
							"    pm.test(\"Status code is 208 when previously added phone number is provided\", function () {\r",
							"        pm.response.to.have.status(208);\r",
							"    });\r",
							"\r",
							"    pm.test(\"Message is User already exists when previously added phone number is provided\", function () {\r",
							"        pm.expect(jsonData.message).to.include(\"User already exists\");\r",
							"    });\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":\"{{$randomFullName}}\",\r\n    \"email\":\"{{$randomEmail}}\",\r\n    \"password\":\"{{$randomPassword}}\",\r\n    \"phone_number\":\"{{phoneNo}}\",\r\n    \"nid\":\"{{nid}}\",\r\n    \"role\": \"Merch\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/user/create",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"user",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Merchant",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let nid = Math.floor(Math.random() * 9000000) + 1000000\r",
							"console.log(nid)\r",
							"let phoneNo=\"0183\"+ nid\r",
							"pm.collectionVariables.set(\"nid\",nid)\r",
							"pm.collectionVariables.set(\"phoneNo\",phoneNo)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json()\r",
							"let id = jsonData.user.id\r",
							"let merchantNo = jsonData.user.phone_number\r",
							"// console.log(id)\r",
							"pm.globals.set(\"merchantID\",id)\r",
							"pm.globals.set(\"merchantNo\", merchantNo)\r",
							"\r",
							"pm.test(\"Status code is 201 when merchant is created succesfully\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Message is User created for valid credentials\", function () {\r",
							"    pm.expect(jsonData.message).to.include(\"User created\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":\"{{$randomFullName}}\",\r\n    \"email\":\"{{$randomEmail}}\",\r\n    \"password\":\"{{$randomPassword}}\",\r\n    \"phone_number\":\"{{phoneNo}}\",\r\n    \"nid\":\"{{nid}}\",\r\n    \"role\": \"Merchant\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/user/create",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"user",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Customer 1 with invalid creds",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let nid = Math.floor(Math.random() * 9000000) + 1000000\r",
							"console.log(nid)\r",
							"let phoneNo=\"0183\"+ nid\r",
							"pm.collectionVariables.set(\"nid\",nid)\r",
							"pm.collectionVariables.set(\"phoneNo\",phoneNo)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json()\r",
							"// let id = jsonData.user.id\r",
							"// let agentNo = jsonData.user.phone_number\r",
							"// // console.log(id)\r",
							"// pm.globals.set(\"agentID\",id)\r",
							"// pm.globals.set(\"agentNo\", agentNo)\r",
							"\r",
							"let msg = jsonData.message\r",
							"let status = pm.response.code\r",
							"\r",
							"if(status === 400){\r",
							"    pm.test(\"Status code is 400 when there is an empty field or invalid role\", function () {\r",
							"        pm.response.to.have.status(400);\r",
							"    });\r",
							"    if(msg[0] !== \"I\"){\r",
							"        let fieldName = msg.match(/\"([^\"]+)\"/)[1]\r",
							"        console.log(fieldName)\r",
							"\r",
							"        pm.test(\"Message is \"+ fieldName + \" is not allowed to be empty when name is not provided\", function () {\r",
							"            pm.expect(jsonData.message).to.include(\"\\\"\" + fieldName + \"\\\"\" + \" is not allowed to be empty\");\r",
							"        });\r",
							"    }\r",
							"    else {\r",
							"        pm.test(\"Message is Invalid role when an invalid role is provided\", function () {\r",
							"            pm.expect(jsonData.message).to.include(\"Invalid role\");\r",
							"        });\r",
							"    }\r",
							"}\r",
							"\r",
							"if(status === 208){\r",
							"    pm.test(\"Status code is 208 when previously added phone number is provided\", function () {\r",
							"        pm.response.to.have.status(208);\r",
							"    });\r",
							"\r",
							"    pm.test(\"Message is User already exists when previously added phone number is provided\", function () {\r",
							"        pm.expect(jsonData.message).to.include(\"User already exists\");\r",
							"    });\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":\"{{$randomFullName}}\",\r\n    \"email\":\"\",\r\n    \"password\":\"{{$randomPassword}}\",\r\n    \"phone_number\":\"{{phoneNo}}\",\r\n    \"nid\":\"{{nid}}\",\r\n    \"role\": \"Customer\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/user/create",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"user",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Customer 1",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let nid = Math.floor(Math.random() * 9000000) + 1000000\r",
							"console.log(nid)\r",
							"let phoneNo=\"0183\"+ nid\r",
							"pm.collectionVariables.set(\"nid\",nid)\r",
							"pm.collectionVariables.set(\"phoneNo\",phoneNo)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json()\r",
							"let id = jsonData.user.id\r",
							"let customerNo = jsonData.user.phone_number\r",
							"// console.log(id)\r",
							"pm.globals.set(\"customerID1\",id)\r",
							"pm.globals.set(\"customerNo1\", customerNo)\r",
							"\r",
							"pm.collectionVariables.set(\"userToDelete\", id)\r",
							"\r",
							"pm.test(\"Status code is 201 when customer is created succesfully\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Message is User created for valid credentials\", function () {\r",
							"    pm.expect(jsonData.message).to.include(\"User created\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":\"{{$randomFullName}}\",\r\n    \"email\":\"{{$randomEmail}}\",\r\n    \"password\":\"{{$randomPassword}}\",\r\n    \"phone_number\":\"{{phoneNo}}\",\r\n    \"nid\":\"{{nid}}\",\r\n    \"role\": \"Customer\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/user/create",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"user",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Customer 2 with invalid creds",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let nid = Math.floor(Math.random() * 9000000) + 1000000\r",
							"console.log(nid)\r",
							"let phoneNo=\"0183\"+ nid\r",
							"pm.collectionVariables.set(\"nid\",nid)\r",
							"pm.collectionVariables.set(\"phoneNo\",phoneNo)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json()\r",
							"// let id = jsonData.user.id\r",
							"// let agentNo = jsonData.user.phone_number\r",
							"// // console.log(id)\r",
							"// pm.globals.set(\"agentID\",id)\r",
							"// pm.globals.set(\"agentNo\", agentNo)\r",
							"\r",
							"let msg = jsonData.message\r",
							"let status = pm.response.code\r",
							"\r",
							"if(status === 400){\r",
							"    pm.test(\"Status code is 400 when there is an empty field or invalid role\", function () {\r",
							"        pm.response.to.have.status(400);\r",
							"    });\r",
							"    if(msg[0] !== \"I\"){\r",
							"        let fieldName = msg.match(/\"([^\"]+)\"/)[1]\r",
							"        console.log(fieldName)\r",
							"\r",
							"        pm.test(\"Message is \"+ fieldName + \" is not allowed to be empty when name is not provided\", function () {\r",
							"            pm.expect(jsonData.message).to.include(\"\\\"\" + fieldName + \"\\\"\" + \" is not allowed to be empty\");\r",
							"        });\r",
							"    }\r",
							"    else {\r",
							"        pm.test(\"Message is Invalid role when an invalid role is provided\", function () {\r",
							"            pm.expect(jsonData.message).to.include(\"Invalid role\");\r",
							"        });\r",
							"    }\r",
							"}\r",
							"\r",
							"if(status === 208){\r",
							"    pm.test(\"Status code is 208 when previously added phone number is provided\", function () {\r",
							"        pm.response.to.have.status(208);\r",
							"    });\r",
							"\r",
							"    pm.test(\"Message is User already exists when previously added phone number is provided\", function () {\r",
							"        pm.expect(jsonData.message).to.include(\"User already exists\");\r",
							"    });\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":\"{{$randomFullName}}\",\r\n    \"email\":\"{{$randomEmail}}\",\r\n    \"password\":\"{{$randomPassword}}\",\r\n    \"phone_number\":\"{{customerNo1}}\",\r\n    \"nid\":\"{{nid}}\",\r\n    \"role\": \"Customer\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/user/create",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"user",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Customer 2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let nid = Math.floor(Math.random() * 9000000) + 1000000\r",
							"console.log(nid)\r",
							"let phoneNo=\"0183\"+ nid\r",
							"pm.collectionVariables.set(\"nid\",nid)\r",
							"pm.collectionVariables.set(\"phoneNo\",phoneNo)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json()\r",
							"let id = jsonData.user.id\r",
							"let customerNo = jsonData.user.phone_number\r",
							"// console.log(id)\r",
							"pm.globals.set(\"customerID2\",id)\r",
							"pm.globals.set(\"customerNo2\", customerNo)\r",
							"\r",
							"pm.collectionVariables.set(\"userToDelete\", id)\r",
							"\r",
							"pm.test(\"Status code is 201 when customer is created succesfully\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Message is User created for valid credentials\", function () {\r",
							"    pm.expect(jsonData.message).to.include(\"User created\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":\"{{$randomFullName}}\",\r\n    \"email\":\"{{$randomEmail}}\",\r\n    \"password\":\"{{$randomPassword}}\",\r\n    \"phone_number\":\"{{phoneNo}}\",\r\n    \"nid\":\"{{nid}}\",\r\n    \"role\": \"Customer\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/user/create",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"user",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "SystemToAgent with invalid creds",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json()\r",
							"\r",
							"let msg = jsonData.message\r",
							"let status = pm.response.code\r",
							"\r",
							"if(status === 208){\r",
							"    pm.test(\"Status code is 208 when amount is out of limit (10<=amount<=10000)\", function () {\r",
							"        pm.response.to.have.status(208);\r",
							"    });\r",
							"\r",
							"    pm.test(\"Message is User Limit exceeded when amount is out of limit (10<=amount<=10000)\", function () {\r",
							"        pm.expect(jsonData.message).to.include(\"Limit exceeded\");\r",
							"    });\r",
							"}\r",
							"\r",
							"if(status === 404){\r",
							"    pm.test(\"Status code is 404 when any account is invalid\", function () {\r",
							"        pm.response.to.have.status(404);\r",
							"    });\r",
							"\r",
							"    pm.test(\"Message is Account does not exist when any account is invalid\", function () {\r",
							"        pm.expect(jsonData.message).to.include(\"Account does not exist\");\r",
							"    });\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"from_account\": \"SYSTEM\",\r\n  \"to_account\": \"{{agentNo}}\",\r\n  \"amount\": 200000\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/transaction/deposit",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"transaction",
						"deposit"
					]
				}
			},
			"response": []
		},
		{
			"name": "SystemToAgent",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 201 for valid credentials\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Message is Deposit successful for valid credentials\", function () {\r",
							"    pm.expect(jsonData.message).to.include(\"Deposit successful\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"from_account\": \"SYSTEM\",\r\n  \"to_account\": \"{{agentNo}}\",\r\n  \"amount\": 8000\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/transaction/deposit",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"transaction",
						"deposit"
					]
				}
			},
			"response": []
		},
		{
			"name": "AgentToCustomer with invalid creds",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json()\r",
							"\r",
							"let msg = jsonData.message\r",
							"let status = pm.response.code\r",
							"\r",
							"if(status === 208){\r",
							"    pm.test(\"Status code is 208 when amount is out of limit\", function () {\r",
							"        pm.response.to.have.status(208);\r",
							"    });\r",
							"\r",
							"    pm.test(\"Message is Insufficient balance when amount is out of limit\", function () {\r",
							"        pm.expect(jsonData.message).to.include(\"Insufficient balance\");\r",
							"    });\r",
							"}\r",
							"\r",
							"if(status === 404){\r",
							"    pm.test(\"Status code is 404 when any account is invalid\", function () {\r",
							"        pm.response.to.have.status(404);\r",
							"    });\r",
							"\r",
							"    pm.test(\"Message is Account does not exist when any account is invalid\", function () {\r",
							"        pm.expect(jsonData.message).to.include(\"Account does not exist\");\r",
							"    });\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"from_account\": \"{{agentNo}}\",\r\n  \"to_account\": \"{{customerNo1}}\",\r\n  \"amount\": 200000\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/transaction/deposit",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"transaction",
						"deposit"
					]
				}
			},
			"response": []
		},
		{
			"name": "AgentToCustomer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json()\r",
							"let tnxID = jsonData.trnxId\r",
							"console.log(tnxID)\r",
							"\r",
							"pm.collectionVariables.set(\"tnxID\", tnxID)\r",
							"\r",
							"pm.test(\"Status code is 201 for valid credentials\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Message is Deposit successful for valid credentials\", function () {\r",
							"    pm.expect(jsonData.message).to.include(\"Deposit successful\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"from_account\":\"{{agentNo}}\",\r\n  \"to_account\": \"{{customerNo1}}\",\r\n  \"amount\": 2500\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/transaction/deposit",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"transaction",
						"deposit"
					]
				}
			},
			"response": []
		},
		{
			"name": "Agent Balance with wrong number",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 404 for wrong number\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Message is Not Found for giving wrong number\", function () {\r",
							"    pm.expect(jsonData.message).to.include(\"not found\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/transaction/balance/{{agent}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"transaction",
						"balance",
						"{{agent}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Agent Balance",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200 for valid credentials\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Message is User balance for valid credentials\", function () {\r",
							"    pm.expect(jsonData.message).to.include(\"balance\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/transaction/balance/{{agentNo}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"transaction",
						"balance",
						"{{agentNo}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Agent Statement with invalid number",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 404 for wrong number\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Message is Not Found for giving wrong number\", function () {\r",
							"    pm.expect(jsonData.message).to.include(\"not found\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/transaction/statement/{{agent}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"transaction",
						"statement",
						"{{agent}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Agent Statement",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200 for valid credentials\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Message is Transaction list for valid credentials\", function () {\r",
							"    pm.expect(jsonData.message).to.include(\"Transaction list\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/transaction/statement/{{agentNo}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"transaction",
						"statement",
						"{{agentNo}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Withdraw with invalid creds",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json()\r",
							"\r",
							"let msg = jsonData.message\r",
							"let status = pm.response.code\r",
							"\r",
							"if(status === 208){\r",
							"    pm.test(\"Status code is 208 when amount is out of limit\", function () {\r",
							"        pm.response.to.have.status(208);\r",
							"    });\r",
							"\r",
							"    pm.test(\"Message is Insufficient balance when amount is out of limit\", function () {\r",
							"        pm.expect(jsonData.message).to.include(\"Insufficient balance\");\r",
							"    });\r",
							"}\r",
							"\r",
							"if(status === 404){\r",
							"    pm.test(\"Status code is 404 when any account is invalid\", function () {\r",
							"        pm.response.to.have.status(404);\r",
							"    });\r",
							"\r",
							"    pm.test(\"Message is Account does not exist when any account is invalid\", function () {\r",
							"        pm.expect(jsonData.message).to.include(\"Account does not exist\");\r",
							"    });\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"from_account\": \"{{customerNo1}}\",\r\n  \"to_account\": \"{{agentNo}}\",\r\n  \"amount\": 200000\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/transaction/withdraw",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"transaction",
						"withdraw"
					]
				}
			},
			"response": []
		},
		{
			"name": "Withdraw Money",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 201 for valid credentials\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Message is successful for valid credentials\", function () {\r",
							"    pm.expect(jsonData.message).to.include(\"successful\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"from_account\":\"{{customerNo1}}\",\r\n  \"to_account\":\"{{agentNo}}\",\r\n  \"amount\": 1000\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/transaction/withdraw",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"transaction",
						"withdraw"
					]
				}
			},
			"response": []
		},
		{
			"name": "Customer Balance with wrong number",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 404 for wrong number\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Message is Not Found for giving wrong number\", function () {\r",
							"    pm.expect(jsonData.message).to.include(\"not found\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/transaction/balance/{{customerNo}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"transaction",
						"balance",
						"{{customerNo}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Customer Balance",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200 for valid credentials\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Message is User balance for valid credentials\", function () {\r",
							"    pm.expect(jsonData.message).to.include(\"balance\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/transaction/balance/{{customerNo1}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"transaction",
						"balance",
						"{{customerNo1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "CustomerToCustomer with invalid creds",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json()\r",
							"\r",
							"let msg = jsonData.message\r",
							"let status = pm.response.code\r",
							"\r",
							"if(status === 208){\r",
							"    pm.test(\"Status code is 208 when amount is out of limit\", function () {\r",
							"        pm.response.to.have.status(208);\r",
							"    });\r",
							"\r",
							"    pm.test(\"Message is Insufficient balance when amount is out of limit\", function () {\r",
							"        pm.expect(jsonData.message).to.include(\"Insufficient balance\");\r",
							"    });\r",
							"}\r",
							"\r",
							"if(status === 404){\r",
							"    pm.test(\"Status code is 404 when any account is invalid\", function () {\r",
							"        pm.response.to.have.status(404);\r",
							"    });\r",
							"\r",
							"    pm.test(\"Message is Account does not exist when any account is invalid\", function () {\r",
							"        pm.expect(jsonData.message).to.include(\"Account does not exist\");\r",
							"    });\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"from_account\": \"{{customerNo1}}\",\r\n  \"to_account\": \"{{customerNo2}}\",\r\n  \"amount\": 200000\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/transaction/sendmoney",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"transaction",
						"sendmoney"
					]
				}
			},
			"response": []
		},
		{
			"name": "CustomerToCustomer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 201 for valid credentials\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Message is successful for valid credentials\", function () {\r",
							"    pm.expect(jsonData.message).to.include(\"successful\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"from_account\": \"{{customerNo1}}\",\r\n  \"to_account\": \"{{customerNo2}}\",\r\n  \"amount\": 1200,\r\n  \"transaction_type\": \"send_money\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/transaction/sendmoney",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"transaction",
						"sendmoney"
					]
				}
			},
			"response": []
		},
		{
			"name": "CustomerToMerchant with invalid creds",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json()\r",
							"\r",
							"let msg = jsonData.message\r",
							"let status = pm.response.code\r",
							"\r",
							"if(status === 208){\r",
							"    pm.test(\"Status code is 208 when amount is out of limit\", function () {\r",
							"        pm.response.to.have.status(208);\r",
							"    });\r",
							"\r",
							"    pm.test(\"Message is Insufficient balance when amount is out of limit\", function () {\r",
							"        pm.expect(jsonData.message).to.include(\"Insufficient balance\");\r",
							"    });\r",
							"}\r",
							"\r",
							"if(status === 404){\r",
							"    pm.test(\"Status code is 404 when any account is invalid\", function () {\r",
							"        pm.response.to.have.status(404);\r",
							"    });\r",
							"\r",
							"    pm.test(\"Message is Account does not exist when any account is invalid\", function () {\r",
							"        pm.expect(jsonData.message).to.include(\"Account does not exist\");\r",
							"    });\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"from_account\": \"{{customerNo2}}\",\r\n  \"to_account\": \"{{merchantNo}}\",\r\n  \"amount\": 200000\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/transaction/payment",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"transaction",
						"payment"
					]
				}
			},
			"response": []
		},
		{
			"name": "CustomerToMerchant",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 201 for valid credentials\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Message is successful for valid credentials\", function () {\r",
							"    pm.expect(jsonData.message).to.include(\"successful\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"from_account\":\"{{customerNo2}}\",\r\n  \"to_account\":\"{{merchantNo}}\",\r\n  \"amount\": 1050 \r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/transaction/payment",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"transaction",
						"payment"
					]
				}
			},
			"response": []
		},
		{
			"name": "Customer Balance 2 with wrong number",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 404 for wrong number\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Message is Not Found for giving wrong number\", function () {\r",
							"    pm.expect(jsonData.message).to.include(\"not found\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/transaction/balance/{{customerNo}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"transaction",
						"balance",
						"{{customerNo}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Customer Balance 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200 for valid credentials\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Message is User balance for valid credentials\", function () {\r",
							"    pm.expect(jsonData.message).to.include(\"balance\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/transaction/balance/{{customerNo2}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"transaction",
						"balance",
						"{{customerNo2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Customer Statement with invalid number",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 404 for wrong number\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Message is Not Found for giving wrong number\", function () {\r",
							"    pm.expect(jsonData.message).to.include(\"not found\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/transaction/statement/{{customerNo}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"transaction",
						"statement",
						"{{customerNo}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Customer Statement",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200 for valid credentials\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Message is Transaction list for valid credentials\", function () {\r",
							"    pm.expect(jsonData.message).to.include(\"Transaction list\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/transaction/statement/{{customerNo2}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"transaction",
						"statement",
						"{{customerNo2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Merchant Balance with wrong number",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 404 for wrong number\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Message is Not Found for giving wrong number\", function () {\r",
							"    pm.expect(jsonData.message).to.include(\"not found\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/transaction/balance/{{merchant}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"transaction",
						"balance",
						"{{merchant}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Merchant Balance",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200 for valid credentials\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Message is User balance for valid credentials\", function () {\r",
							"    pm.expect(jsonData.message).to.include(\"balance\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/transaction/balance/{{merchantNo}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"transaction",
						"balance",
						"{{merchantNo}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Merchant Statement with invalid number",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 404 for wrong number\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Message is Not Found for giving wrong number\", function () {\r",
							"    pm.expect(jsonData.message).to.include(\"not found\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/transaction/statement/{{merchant}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"transaction",
						"statement",
						"{{merchant}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Merchant Statement",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200 for valid credentials\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Message is Transaction list for valid credentials\", function () {\r",
							"    pm.expect(jsonData.message).to.include(\"Transaction list\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/transaction/statement/{{merchantNo}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"transaction",
						"statement",
						"{{merchantNo}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json()\r",
							"\r",
							"pm.test(\"Status code is 200 for valid credentials\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Message is User Deleted successfully for valid credentials\", function () {\r",
							"    pm.expect(jsonData.message).to.include(\"deleted\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/user/delete/{{userToDelete}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"user",
						"delete",
						"{{userToDelete}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete User with invalid creds",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json()\r",
							"\r",
							"pm.test(\"Status code is 404 for invalid user id\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Message is User Not Found successfully for invalid user id\", function () {\r",
							"    pm.expect(jsonData.message).to.include(\"not found\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/user/delete/{{userToDelete}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"user",
						"delete",
						"{{userToDelete}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"pm.request.headers.add({key: \"Authorization\", value: \"{{token}}\"})\r",
					"pm.request.headers.add({key: \"X-AUTH-SECRET-KEY\", value: \"{{xkey}}\"})"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "nid",
			"value": "",
			"type": "string"
		},
		{
			"key": "phoneNo",
			"value": "",
			"type": "string"
		},
		{
			"key": "userToDelete",
			"value": "",
			"type": "string"
		},
		{
			"key": "tnxID",
			"value": ""
		}
	]
}